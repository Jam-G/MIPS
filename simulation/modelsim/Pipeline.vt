// Copyright (C) 1991-2012 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/19/2014 00:23:33"
                                                                                
// Verilog Test Bench template for design : Pipeline
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module Pipeline_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
// wires                                               
wire [31:0]  A;
wire [3:0]  ALUOp_ID_EX;
wire ALUSrcA_ID_EX;
wire ALUSrcB_ID_EX;
wire [31:0]  A_in_ID_EX;
wire [7:0]  A_in_sel;
wire [31:0]  B;
wire [31:0]  B_in_ID_EX;
wire [7:0]  B_in_sel;
wire Branch_EX_MEM;
wire Branch_ID_EX;
wire [31:0]  Branch_addr_EX_MEM;
wire [2:0]  Codition_EX_MEM;
wire [2:0]  Condition_ID_EX;
wire [1:0]  ExResultSrc_ID_EX;
wire [5:0]  Func_IF_ID;
wire ID_EX_Flush;
wire ID_EX_Stall;
wire IF_ID_Flush;
wire IF_ID_Stall;
wire [31:0]  Imm32_ID_EX;
wire Jump_ID_EX;
wire Less_EX_MEM;
wire [31:0]  MemData_EX_MEM;
wire [31:0]  MemData_MEM_WR;
wire MemRead_EX_MEM;
wire MemRead_ID_EX;
wire MemRead_MEM_WR;
wire MemWrite_EX_MEM;
wire MemWrite_ID_EX;
wire [3:0]  Mem_write_byte_en;
wire [5:0]  Op_EX_MEM;
wire [5:0]  Op_ID_EX;
wire [5:0]  Op_IF_ID;
wire Overflow_EX_MEM;
wire [31:0]  PC_ID_EX;
wire [31:0]  PC_IF_ID;
wire [4:0]  Rd_EX_MEM;
wire [4:0]  Rd_ID_EX;
wire [4:0]  Rd_IF_ID;
wire [4:0]  Rd_MEM_WR;
wire [3:0]  Rd_write_byte_en_MEM_WR;
wire [1:0]  RegDst_ID_EX;
wire Reg_Write_EX_MEM;
wire Reg_Write_ID_EX;
wire Reg_Write_MEM_WR;
wire [3:0]  RsOut_sel;
wire [4:0]  Rs_ID_EX;
wire [4:0]  Rs_IF_ID;
wire [31:0]  Rs_out_EX;
wire [3:0]  RtOut_sel;
wire [4:0]  Rt_ID_EX;
wire [4:0]  Rt_IF_ID;
wire [31:0]  Rt_out_EX;
wire [4:0]  Shamt_ID_EX;
wire [4:0]  Shamt_IF_ID;
wire ShiftAmountSrc_ID_EX;
wire [1:0]  ShiftOp_ID_EX;
wire [31:0]  WBData_EX_MEM;
wire [31:0]  WBData_MEM_WR;
wire Zero_EX_MEM;

// assign statements (if any)                          
Pipeline i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALUOp_ID_EX(ALUOp_ID_EX),
	.ALUSrcA_ID_EX(ALUSrcA_ID_EX),
	.ALUSrcB_ID_EX(ALUSrcB_ID_EX),
	.A_in_ID_EX(A_in_ID_EX),
	.A_in_sel(A_in_sel),
	.B(B),
	.B_in_ID_EX(B_in_ID_EX),
	.B_in_sel(B_in_sel),
	.Branch_EX_MEM(Branch_EX_MEM),
	.Branch_ID_EX(Branch_ID_EX),
	.Branch_addr_EX_MEM(Branch_addr_EX_MEM),
	.Codition_EX_MEM(Codition_EX_MEM),
	.Condition_ID_EX(Condition_ID_EX),
	.ExResultSrc_ID_EX(ExResultSrc_ID_EX),
	.Func_IF_ID(Func_IF_ID),
	.ID_EX_Flush(ID_EX_Flush),
	.ID_EX_Stall(ID_EX_Stall),
	.IF_ID_Flush(IF_ID_Flush),
	.IF_ID_Stall(IF_ID_Stall),
	.Imm32_ID_EX(Imm32_ID_EX),
	.Jump_ID_EX(Jump_ID_EX),
	.Less_EX_MEM(Less_EX_MEM),
	.MemData_EX_MEM(MemData_EX_MEM),
	.MemData_MEM_WR(MemData_MEM_WR),
	.MemRead_EX_MEM(MemRead_EX_MEM),
	.MemRead_ID_EX(MemRead_ID_EX),
	.MemRead_MEM_WR(MemRead_MEM_WR),
	.MemWrite_EX_MEM(MemWrite_EX_MEM),
	.MemWrite_ID_EX(MemWrite_ID_EX),
	.Mem_write_byte_en(Mem_write_byte_en),
	.Op_EX_MEM(Op_EX_MEM),
	.Op_ID_EX(Op_ID_EX),
	.Op_IF_ID(Op_IF_ID),
	.Overflow_EX_MEM(Overflow_EX_MEM),
	.PC_ID_EX(PC_ID_EX),
	.PC_IF_ID(PC_IF_ID),
	.Rd_EX_MEM(Rd_EX_MEM),
	.Rd_ID_EX(Rd_ID_EX),
	.Rd_IF_ID(Rd_IF_ID),
	.Rd_MEM_WR(Rd_MEM_WR),
	.Rd_write_byte_en_MEM_WR(Rd_write_byte_en_MEM_WR),
	.RegDst_ID_EX(RegDst_ID_EX),
	.Reg_Write_EX_MEM(Reg_Write_EX_MEM),
	.Reg_Write_ID_EX(Reg_Write_ID_EX),
	.Reg_Write_MEM_WR(Reg_Write_MEM_WR),
	.RsOut_sel(RsOut_sel),
	.Rs_ID_EX(Rs_ID_EX),
	.Rs_IF_ID(Rs_IF_ID),
	.Rs_out_EX(Rs_out_EX),
	.RtOut_sel(RtOut_sel),
	.Rt_ID_EX(Rt_ID_EX),
	.Rt_IF_ID(Rt_IF_ID),
	.Rt_out_EX(Rt_out_EX),
	.Shamt_ID_EX(Shamt_ID_EX),
	.Shamt_IF_ID(Shamt_IF_ID),
	.ShiftAmountSrc_ID_EX(ShiftAmountSrc_ID_EX),
	.ShiftOp_ID_EX(ShiftOp_ID_EX),
	.WBData_EX_MEM(WBData_EX_MEM),
	.WBData_MEM_WR(WBData_MEM_WR),
	.Zero_EX_MEM(Zero_EX_MEM),
	.clk(clk)
);
always #10 clk = ~clk;
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
   clk = 0; 
#2000
$stop;                                                    
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

